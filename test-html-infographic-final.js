console.log('=== Testing Final HTML Infographic Generation ===\n');

const fs = require('fs');
const path = require('path');

async function testFinalHTMLInfographic() {
  console.log('1. Testing HTML infographic generation with accurate data...');
  
  try {
    const { generateHTMLReport } = require('./utils/htmlReportGenerator');
    
    const testData = {
      companyName: 'ÂõΩÁ´ãÂ§ßÂ≠¶Ê≥ï‰∫∫Â±±Ê¢®Â§ßÂ≠¶',
      fiscalYear: 'Âπ≥Êàê27Âπ¥Â∫¶',
      statements: {
        Ë≤∏ÂÄüÂØæÁÖßË°®: {
          Ë≥áÁî£„ÅÆÈÉ®: {
            ÊµÅÂãïË≥áÁî£: { ÊµÅÂãïË≥áÁî£ÂêàË®à: 8838001000 },
            Âõ∫ÂÆöË≥áÁî£: { Âõ∫ÂÆöË≥áÁî£ÂêàË®à: 63054601000 },
            Ë≥áÁî£ÂêàË®à: 71892602000
          },
          Ë≤†ÂÇµ„ÅÆÈÉ®: {
            ÊµÅÂãïË≤†ÂÇµ: { ÊµÅÂãïË≤†ÂÇµÂêàË®à: 7020870000 },
            Âõ∫ÂÆöË≤†ÂÇµ: { Âõ∫ÂÆöË≤†ÂÇµÂêàË®à: 20926388000 },
            Ë≤†ÂÇµÂêàË®à: 27947258000
          },
          Á¥îË≥áÁî£„ÅÆÈÉ®: { Á¥îË≥áÁî£ÂêàË®à: 43945344000 }
        },
        ÊêçÁõäË®àÁÆóÊõ∏: {
          ÁµåÂ∏∏ÂèéÁõä: { 
            ÁµåÂ∏∏ÂèéÁõäÂêàË®à: 34069533000,
            ÈôÑÂ±ûÁóÖÈô¢ÂèéÁõä: 17100000000,
            ÈÅãÂñ∂Ë≤ª‰∫§‰ªòÈáëÂèéÁõä: 9670000000,
            Â≠¶ÁîüÁ¥ç‰ªòÈáëÁ≠âÂèéÁõä: 2870000000,
            ÂèóË®óÁ†îÁ©∂Á≠âÂèéÁõä: 1540000000
          },
          ÁµåÂ∏∏Ë≤ªÁî®: { 
            ÁµåÂ∏∏Ë≤ªÁî®ÂêàË®à: 34723539000,
            ‰∫∫‰ª∂Ë≤ª: 16360000000,
            Ë®∫ÁôÇÁµåË≤ª: 12510000000,
            ÊïôËÇ≤ÁµåË≤ª: 1560000000,
            Á†îÁ©∂ÁµåË≤ª: 1570000000
          },
          ÁµåÂ∏∏ÊêçÂ§±: 654006000,
          ÂΩìÊúüÁ¥îÊêçÂ§±: 325961000
        },
        „Ç≠„É£„ÉÉ„Ç∑„É•„Éï„É≠„ÉºË®àÁÆóÊõ∏: {
          Âñ∂Ê•≠Ê¥ªÂãï„Å´„Çà„Çã„Ç≠„É£„ÉÉ„Ç∑„É•„Éï„É≠„Éº: { Âñ∂Ê•≠Ê¥ªÂãï„Å´„Çà„Çã„Ç≠„É£„ÉÉ„Ç∑„É•„Éï„É≠„ÉºÂêàË®à: 1470000000 },
          ÊäïË≥áÊ¥ªÂãï„Å´„Çà„Çã„Ç≠„É£„ÉÉ„Ç∑„É•„Éï„É≠„Éº: { ÊäïË≥áÊ¥ªÂãï„Å´„Çà„Çã„Ç≠„É£„ÉÉ„Ç∑„É•„Éï„É≠„ÉºÂêàË®à: -10489748000 },
          Ë≤°ÂãôÊ¥ªÂãï„Å´„Çà„Çã„Ç≠„É£„ÉÉ„Ç∑„É•„Éï„É≠„Éº: { Ë≤°ÂãôÊ¥ªÂãï„Å´„Çà„Çã„Ç≠„É£„ÉÉ„Ç∑„É•„Éï„É≠„ÉºÂêàË®à: 4340000000 }
        },
        „Çª„Ç∞„É°„É≥„ÉàÊÉÖÂ†±: {
          'Â≠¶ÈÉ®„ÉªÁ†îÁ©∂ÁßëÁ≠â': { Ê•≠ÂãôÊêçÁõä: 350000000 },
          'ÈôÑÂ±ûÁóÖÈô¢': { Ê•≠ÂãôÊêçÁõä: -410984000 },
          'ÈôÑÂ±ûÂ≠¶Ê†°': { Ê•≠ÂãôÊêçÁõä: -90000000 }
        }
      },
      ratios: {
        Ë≤†ÂÇµÊØîÁéá: 63.62,
        ÊµÅÂãïÊØîÁéá: 1.2588,
        Âõ∫ÂÆöÊØîÁéá: 143.5,
        Ëá™Â∑±Ë≥áÊú¨ÊØîÁéá: 61.1
      },
      analysis: 'Professional financial analysis',
      extractedText: 'Extracted financial data'
    };
    
    console.log('2. Generating HTML infographic...');
    const htmlContent = generateHTMLReport(testData);
    
    const outputPath = path.join(__dirname, 'final-infographic-output.html');
    fs.writeFileSync(outputPath, htmlContent);
    
    console.log('‚úÖ HTML infographic generated successfully');
    console.log(`üìÑ Output saved to: ${outputPath}`);
    console.log(`üìä File size: ${fs.statSync(outputPath).size} bytes`);
    
    console.log('\n3. Verifying target format compliance...');
    
    const hasCorrectTitle = htmlContent.includes('ÂõΩÁ´ãÂ§ßÂ≠¶Ê≥ï‰∫∫Â±±Ê¢®Â§ßÂ≠¶');
    const hasKPICards = htmlContent.includes('kpi-card');
    const hasChartJS = htmlContent.includes('chart.js');
    const hasTailwind = htmlContent.includes('tailwindcss');
    const hasBrilliantBlues = htmlContent.includes('brilliantBlues');
    const hasProcessLabels = htmlContent.includes('processLabels');
    const hasSegmentAnalysis = htmlContent.includes('„Çª„Ç∞„É°„É≥„ÉàÂàÜÊûê');
    const hasCashFlowAnalysis = htmlContent.includes('„Ç≠„É£„ÉÉ„Ç∑„É•„Éï„É≠„ÉºÂàÜÊûê');
    const hasStrategicRecommendations = htmlContent.includes('Êà¶Áï•ÁöÑÊèêË®Ä');
    
    console.log(`University name: ${hasCorrectTitle ? '‚úÖ' : '‚ùå'}`);
    console.log(`KPI cards: ${hasKPICards ? '‚úÖ' : '‚ùå'}`);
    console.log(`Chart.js integration: ${hasChartJS ? '‚úÖ' : '‚ùå'}`);
    console.log(`Tailwind CSS: ${hasTailwind ? '‚úÖ' : '‚ùå'}`);
    console.log(`Brilliant Blues color scheme: ${hasBrilliantBlues ? '‚úÖ' : '‚ùå'}`);
    console.log(`Process Labels function: ${hasProcessLabels ? '‚úÖ' : '‚ùå'}`);
    console.log(`Segment analysis: ${hasSegmentAnalysis ? '‚úÖ' : '‚ùå'}`);
    console.log(`Cash flow analysis: ${hasCashFlowAnalysis ? '‚úÖ' : '‚ùå'}`);
    console.log(`Strategic recommendations: ${hasStrategicRecommendations ? '‚úÖ' : '‚ùå'}`);
    
    console.log('\n4. Checking financial accuracy...');
    
    const has719Assets = htmlContent.includes('719') && htmlContent.includes('ÂÑÑÂÜÜ');
    const has61EquityRatio = htmlContent.includes('61.1') && htmlContent.includes('%');
    const has6OperatingLoss = htmlContent.includes('6.5') || htmlContent.includes('6.54');
    const has4HospitalLoss = htmlContent.includes('4.1') || htmlContent.includes('4.11');
    
    console.log(`Total assets (719ÂÑÑÂÜÜ): ${has719Assets ? '‚úÖ' : '‚ùå'}`);
    console.log(`Equity ratio (61.1%): ${has61EquityRatio ? '‚úÖ' : '‚ùå'}`);
    console.log(`Operating loss (~6.5ÂÑÑÂÜÜ): ${has6OperatingLoss ? '‚úÖ' : '‚ùå'}`);
    console.log(`Hospital segment loss (~4.1ÂÑÑÂÜÜ): ${has4HospitalLoss ? '‚úÖ' : '‚ùå'}`);
    
    const formatCompliance = [hasCorrectTitle, hasKPICards, hasChartJS, hasTailwind, hasBrilliantBlues, hasProcessLabels, hasSegmentAnalysis, hasCashFlowAnalysis, hasStrategicRecommendations].filter(Boolean).length;
    const accuracyScore = [has719Assets, has61EquityRatio, has6OperatingLoss, has4HospitalLoss].filter(Boolean).length;
    
    console.log(`\nüìä Format Compliance: ${formatCompliance}/9`);
    console.log(`üìà Financial Accuracy: ${accuracyScore}/4`);
    
    if (formatCompliance >= 8 && accuracyScore >= 3) {
      console.log('üéâ HTML infographic meets target format requirements!');
      return true;
    } else {
      console.log('‚ö†Ô∏è HTML infographic needs further refinement');
      return false;
    }
    
  } catch (error) {
    console.log('‚ùå Test failed:', error.message);
    console.log('Error details:', error);
    return false;
  }
}

testFinalHTMLInfographic().then(success => {
  if (success) {
    console.log('\n‚úÖ Final HTML infographic test completed successfully!');
    console.log('Ready for production deployment.');
  } else {
    console.log('\n‚ùå Final HTML infographic test failed');
    console.log('Additional refinements needed.');
  }
}).catch(console.error);
